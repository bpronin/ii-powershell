/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.bopr.intellij.iipowershell.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.bopr.intellij.iipowershell.language.psi.PowerShellTypes;
import static com.bopr.intellij.iipowershell.language.psi.PowerShellTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>PowerShell.flex</tt>
 */
class PowerShellLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4160 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\4\1\6\3\4\1\7\6\4\1\6\14\4\1\10\3\4\1\10\3\4\1"+
    "\10\3\4\1\10\3\4\1\10\3\4\1\10\3\4\1\10\3\4\1\10\3\4\1\10\3\4\1\10\2\4\1\7"+
    "\3\4\1\7\2\4\1\6\10\4\1\6\1\4\1\7\57\4\1\5\12\4\1\6\1\7\11\4\1\10\3\4\1\7"+
    "\5\4\1\11\5\4\1\7\2\4\1\7\4\4\1\11\35\4\1\12\1\13\1\14\175\4\1\5\160\4\1\6"+
    "\24\4\1\7\1\4\1\6\5\4\2\7\2\4\1\7\14\4\1\7\130\4\1\7\54\4\1\6\35\4\1\10\3"+
    "\4\1\7\1\4\1\15\4\4\1\7\10\4\1\7\12\4\1\7\3\4\1\7\13\4\1\7\3\4\1\6\2\4\1\7"+
    "\15\4\1\6\32\4\1\7\60\4\1\6\6\4\1\7\143\4\1\16\1\17\12\4\1\7\65\4");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\2\3\1\2\22\0\1\3\2\0\1\13\7\0\1\5\1\0\1\5\1\22\1\0\1\16\11\12"+
    "\2\0\1\14\1\0\1\15\2\0\1\20\1\10\1\20\1\21\1\11\1\20\1\7\3\0\1\7\1\6\1\7\2"+
    "\0\1\7\3\0\1\7\13\0\1\4\1\31\1\23\1\33\1\42\1\24\1\43\1\25\1\35\1\26\1\0\1"+
    "\32\1\36\1\45\1\27\1\40\1\46\1\0\1\30\1\37\1\34\1\41\1\50\1\47\1\17\1\44\46"+
    "\0\1\3\37\0\12\12\46\0\12\12\14\0\12\12\20\0\12\12\6\0\12\12\6\0\13\3\10\0"+
    "\3\5\22\0\2\3\5\0\1\3\57\0\1\3\26\0\12\12\16\0\62\12");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\1\4\1\1\1\3"+
    "\16\1\1\0\1\3\3\0\1\5\5\0\2\6\25\0"+
    "\1\3\1\0\1\7\24\0\1\6\5\0\1\10\1\7"+
    "\2\0\1\5\2\0\1\6\22\0\1\7\1\5\11\0"+
    "\1\5\16\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\51\0\122\0\173\0\244\0\315\0\366"+
    "\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\u023e"+
    "\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d\0\u0386"+
    "\0\u0171\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5"+
    "\0\u04ce\0\u04f7\0\u0520\0\u0549\0\51\0\u0572\0\u059b\0\u05c4"+
    "\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c"+
    "\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u0854"+
    "\0\u087d\0\u08a6\0\51\0\u08cf\0\u08f8\0\u0921\0\u094a\0\u0973"+
    "\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92\0\u0abb"+
    "\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\u0c03"+
    "\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22\0\u0401"+
    "\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a"+
    "\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0fb2"+
    "\0\u0fdb\0\u1004\0\u102d\0\u1056\0\u107f\0\u10a8\0\u10d1\0\u10fa"+
    "\0\u1123\0\51\0\u114c\0\u1175\0\u119e\0\u11c7\0\u11f0\0\u1219"+
    "\0\u1242\0\u126b\0\u1294\0\u12bd\0\51\0\u12e6\0\u130f\0\u1338"+
    "\0\u1361\0\u138a\0\u13b3\0\u13dc\0\u1405\0\u142e\0\u1457\0\u1480"+
    "\0\u14a9\0\u14d2\0\u14fb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\4\2\1\7"+
    "\1\10\1\11\1\2\1\12\3\2\1\13\1\14\1\15"+
    "\1\2\1\16\1\2\1\17\2\2\1\20\1\21\2\2"+
    "\1\22\1\2\1\23\1\24\1\25\2\2\1\26\1\27"+
    "\1\30\52\0\1\3\50\0\1\3\1\4\60\0\1\7"+
    "\3\0\1\12\3\0\1\31\34\0\1\32\1\33\2\0"+
    "\1\7\3\0\1\7\2\0\1\32\1\31\2\0\1\33"+
    "\4\0\1\33\1\0\1\33\1\0\1\32\3\0\1\32"+
    "\2\0\2\33\2\0\1\10\2\0\46\10\13\0\1\34"+
    "\43\0\1\32\1\33\2\0\1\7\3\0\1\7\1\35"+
    "\1\0\1\32\1\31\2\0\1\33\4\0\1\33\1\0"+
    "\1\33\1\0\1\32\3\0\1\32\2\0\2\33\14\0"+
    "\1\36\3\0\1\36\56\0\1\37\3\0\1\40\37\0"+
    "\1\41\7\0\1\42\6\0\1\43\41\0\1\44\13\0"+
    "\1\45\31\0\1\46\55\0\1\47\4\0\1\50\1\0"+
    "\1\51\40\0\1\52\4\0\1\53\62\0\1\54\30\0"+
    "\1\55\7\0\1\56\35\0\1\57\4\0\1\60\6\0"+
    "\1\45\3\0\1\61\32\0\1\62\1\0\1\63\7\0"+
    "\1\64\1\65\37\0\1\66\1\67\54\0\1\70\2\0"+
    "\1\71\41\0\1\72\26\0\1\33\15\0\1\33\4\0"+
    "\1\33\1\0\1\33\10\0\2\33\12\0\1\73\12\0"+
    "\1\73\25\0\13\34\1\74\35\34\10\0\3\75\3\0"+
    "\1\75\1\0\2\75\1\0\2\75\4\0\1\75\1\0"+
    "\1\75\6\0\2\75\16\0\1\76\1\36\3\0\1\36"+
    "\5\0\1\76\51\0\1\77\47\0\1\100\52\0\1\101"+
    "\64\0\1\45\45\0\1\102\47\0\1\103\46\0\1\104"+
    "\50\0\1\105\45\0\1\106\46\0\1\107\52\0\1\110"+
    "\12\0\1\45\34\0\1\111\46\0\1\47\56\0\1\112"+
    "\42\0\1\113\65\0\1\114\41\0\1\115\43\0\1\116"+
    "\50\0\1\117\6\0\1\120\52\0\1\121\40\0\1\122"+
    "\47\0\1\123\61\0\1\124\40\0\1\125\46\0\1\126"+
    "\52\0\1\127\50\0\1\45\20\0\13\34\1\74\1\34"+
    "\1\130\33\34\6\0\1\131\1\132\3\75\3\0\1\75"+
    "\1\0\2\75\1\0\2\75\1\132\3\0\1\75\1\132"+
    "\1\75\1\132\1\0\1\131\3\0\2\75\1\0\2\132"+
    "\7\0\1\133\4\0\1\134\3\0\1\134\60\0\1\135"+
    "\53\0\1\136\53\0\1\45\40\0\1\137\52\0\1\140"+
    "\63\0\1\141\42\0\1\142\54\0\1\143\45\0\1\144"+
    "\62\0\1\45\42\0\1\145\36\0\1\146\51\0\1\147"+
    "\47\0\1\150\53\0\1\45\50\0\1\151\50\0\1\152"+
    "\53\0\1\153\61\0\1\45\27\0\1\154\57\0\1\155"+
    "\50\0\1\156\46\0\1\157\55\0\1\160\44\0\1\161"+
    "\25\0\1\132\15\0\1\132\4\0\1\132\1\0\1\132"+
    "\10\0\2\132\12\0\1\162\12\0\1\162\37\0\1\134"+
    "\3\0\1\134\40\0\1\163\1\164\2\0\1\134\3\0"+
    "\1\134\2\0\1\163\3\0\1\164\4\0\1\164\1\0"+
    "\1\164\1\0\1\163\3\0\1\163\2\0\2\164\31\0"+
    "\1\45\53\0\1\45\44\0\1\165\51\0\1\166\51\0"+
    "\1\135\55\0\1\45\52\0\1\45\37\0\1\167\71\0"+
    "\1\45\37\0\1\45\37\0\1\45\52\0\1\160\66\0"+
    "\1\170\41\0\1\171\36\0\1\72\55\0\1\105\53\0"+
    "\1\172\40\0\1\106\62\0\1\173\6\0\1\45\27\0"+
    "\1\45\67\0\1\174\14\0\1\164\15\0\1\164\4\0"+
    "\1\164\1\0\1\164\10\0\2\164\12\0\1\175\12\0"+
    "\1\175\70\0\1\45\31\0\1\176\53\0\1\177\47\0"+
    "\1\200\60\0\1\201\40\0\1\202\60\0\1\203\50\0"+
    "\1\111\51\0\1\204\52\0\1\160\42\0\1\205\61\0"+
    "\1\45\44\0\1\135\34\0\1\146\57\0\1\206\63\0"+
    "\1\207\32\0\1\210\51\0\1\211\45\0\1\212\52\0"+
    "\1\213\66\0\1\101\33\0\1\121\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5412];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\25\1\1\0\1\1\3\0\1\1\5\0"+
    "\1\1\1\11\25\0\1\11\1\0\1\1\24\0\1\1"+
    "\5\0\2\1\2\0\1\1\2\0\1\1\22\0\1\11"+
    "\1\1\11\0\1\11\16\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[139];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PowerShellLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 9: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 10: break;
          case 3: 
            { return DECIMAL_INTEGER_LITERAL;
            } 
            // fall through
          case 11: break;
          case 4: 
            { return SINGLE_LINE_COMMENT;
            } 
            // fall through
          case 12: break;
          case 5: 
            { return REAL_LITERAL;
            } 
            // fall through
          case 13: break;
          case 6: 
            { return KEYWORD;
            } 
            // fall through
          case 14: break;
          case 7: 
            { return HEXADECIMAL_INTEGER_LITERAL;
            } 
            // fall through
          case 15: break;
          case 8: 
            { return DELIMITED_COMMENT;
            } 
            // fall through
          case 16: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
