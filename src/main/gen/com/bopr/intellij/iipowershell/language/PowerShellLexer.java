/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.bopr.intellij.iipowershell.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import com.bopr.intellij.iipowershell.language.psi.PowerShellTypes;
import static com.bopr.intellij.iipowershell.language.psi.PowerShellTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>PowerShell.flex</tt>
 */
class PowerShellLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [10, 6, 5]
   * Total runtime size is 4160 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>11]<<6)|((ch>>5)&0x3f)]<<5)|(ch&0x1f)];
  }

  /* The ZZ_CMAP_Z table has 544 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\15\5\1\7\1\10\11\5\1\11\1\12\1\5\1\13\1\14\11"+
    "\5\1\15\14\5\1\16\2\5\1\17\u01e2\5");

  /* The ZZ_CMAP_Y table has 1024 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\55\4\1\6\3\4\1\7\6\4\1\6\14\4\1\10\3\4\1\10\3\4\1"+
    "\10\3\4\1\10\3\4\1\10\3\4\1\10\3\4\1\10\3\4\1\10\3\4\1\10\3\4\1\10\2\4\1\7"+
    "\3\4\1\7\2\4\1\6\10\4\1\6\1\4\1\7\57\4\1\5\12\4\1\6\1\7\11\4\1\10\3\4\1\7"+
    "\5\4\1\11\5\4\1\7\2\4\1\7\4\4\1\11\35\4\1\12\1\13\1\14\175\4\1\5\160\4\1\6"+
    "\24\4\1\7\1\4\1\6\5\4\2\7\2\4\1\7\14\4\1\7\130\4\1\7\54\4\1\6\35\4\1\10\3"+
    "\4\1\7\1\4\1\15\4\4\1\7\10\4\1\7\12\4\1\7\3\4\1\7\13\4\1\7\3\4\1\6\2\4\1\7"+
    "\15\4\1\6\32\4\1\7\60\4\1\6\6\4\1\7\143\4\1\16\1\17\12\4\1\7\65\4");

  /* The ZZ_CMAP_A table has 512 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\1\2\3\1\2\22\0\1\3\2\0\1\21\4\0\2\11\1\0\1\5\1\7\1\5\1\6\1\0\1"+
    "\24\11\20\1\0\1\10\1\22\1\0\1\23\2\0\1\26\1\16\1\26\1\27\1\17\1\26\1\15\3"+
    "\0\1\15\1\14\1\15\2\0\1\15\3\0\1\15\6\0\1\13\1\0\1\13\2\0\1\4\1\36\1\30\1"+
    "\40\1\47\1\31\1\50\1\32\1\42\1\33\1\0\1\37\1\43\1\52\1\34\1\45\1\53\1\0\1"+
    "\35\1\44\1\41\1\46\1\55\1\54\1\25\1\51\1\0\1\12\1\0\1\12\42\0\1\3\37\0\12"+
    "\20\46\0\12\20\14\0\12\20\20\0\12\20\6\0\12\20\6\0\13\3\10\0\3\5\22\0\2\3"+
    "\5\0\1\3\57\0\1\3\26\0\12\20\16\0\62\20");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\1\1\11\15\1\1\0"+
    "\1\13\1\11\10\0\2\14\26\0\1\11\1\0\1\15"+
    "\23\0\1\14\6\0\1\13\1\16\1\15\3\0\1\14"+
    "\22\0\1\13\1\0\1\15\10\0\1\13\16\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\56\0\134\0\212\0\270\0\346\0\56"+
    "\0\56\0\56\0\56\0\56\0\u0114\0\u0142\0\u0170\0\u019e"+
    "\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e"+
    "\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\346\0\u0422\0\u0450"+
    "\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0"+
    "\0\u05ee\0\56\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702"+
    "\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872"+
    "\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4\0\u09e2"+
    "\0\56\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24"+
    "\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94"+
    "\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04"+
    "\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u04ac\0\u0f46"+
    "\0\u0f74\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6"+
    "\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226"+
    "\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396"+
    "\0\56\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8"+
    "\0\u1506\0\56\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a"+
    "\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\3\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\4\2\1\15\1\16\1\17"+
    "\1\2\1\20\3\2\1\21\1\22\1\2\1\23\1\2"+
    "\1\24\2\2\1\25\1\26\2\2\1\27\1\2\1\30"+
    "\1\31\1\32\2\2\1\33\1\34\1\35\57\0\1\3"+
    "\55\0\1\3\1\4\61\0\1\36\11\0\1\15\3\0"+
    "\1\20\51\0\1\37\3\0\1\37\37\0\1\36\5\0"+
    "\1\40\1\41\2\0\1\15\3\0\1\15\2\0\1\40"+
    "\2\0\1\41\4\0\1\41\1\0\1\41\1\0\1\40"+
    "\3\0\1\40\2\0\2\41\2\0\1\16\2\0\53\16"+
    "\21\0\1\42\42\0\1\36\5\0\1\40\1\41\2\0"+
    "\1\15\3\0\1\15\1\43\1\0\1\40\2\0\1\41"+
    "\4\0\1\41\1\0\1\41\1\0\1\40\3\0\1\40"+
    "\2\0\2\41\33\0\1\44\3\0\1\45\45\0\1\46"+
    "\6\0\1\47\6\0\1\50\46\0\1\51\13\0\1\52"+
    "\36\0\1\53\62\0\1\54\4\0\1\55\1\0\1\56"+
    "\45\0\1\57\4\0\1\60\67\0\1\61\35\0\1\62"+
    "\7\0\1\63\42\0\1\64\4\0\1\65\6\0\1\52"+
    "\3\0\1\66\37\0\1\67\1\0\1\70\7\0\1\71"+
    "\1\72\44\0\1\73\1\74\61\0\1\75\2\0\1\76"+
    "\46\0\1\77\36\0\1\100\1\37\3\0\1\37\4\0"+
    "\1\100\41\0\1\41\14\0\1\41\4\0\1\41\1\0"+
    "\1\41\10\0\2\41\20\0\1\101\11\0\1\101\25\0"+
    "\21\42\1\102\34\42\16\0\3\103\3\0\1\103\1\0"+
    "\4\103\4\0\1\103\1\0\1\103\6\0\2\103\37\0"+
    "\1\104\54\0\1\105\57\0\1\106\71\0\1\52\52\0"+
    "\1\107\54\0\1\110\53\0\1\111\55\0\1\112\52\0"+
    "\1\113\53\0\1\114\57\0\1\115\12\0\1\52\41\0"+
    "\1\116\53\0\1\54\63\0\1\117\47\0\1\120\72\0"+
    "\1\121\46\0\1\122\50\0\1\123\55\0\1\124\6\0"+
    "\1\125\57\0\1\126\45\0\1\127\54\0\1\130\66\0"+
    "\1\131\45\0\1\132\53\0\1\133\57\0\1\134\55\0"+
    "\1\52\25\0\1\135\12\0\1\136\3\0\1\136\31\0"+
    "\21\42\1\102\1\42\1\137\32\42\14\0\1\140\1\141"+
    "\3\103\3\0\1\103\1\0\4\103\1\141\3\0\1\103"+
    "\1\141\1\103\1\141\1\0\1\140\3\0\2\103\1\0"+
    "\2\141\35\0\1\142\60\0\1\143\60\0\1\52\45\0"+
    "\1\144\57\0\1\145\70\0\1\146\47\0\1\147\61\0"+
    "\1\150\52\0\1\151\67\0\1\52\47\0\1\152\43\0"+
    "\1\153\56\0\1\154\54\0\1\155\60\0\1\52\55\0"+
    "\1\156\55\0\1\157\60\0\1\160\66\0\1\52\34\0"+
    "\1\161\64\0\1\162\55\0\1\163\53\0\1\164\62\0"+
    "\1\165\51\0\1\166\36\0\1\136\3\0\1\136\45\0"+
    "\1\167\1\170\2\0\1\136\3\0\1\136\2\0\1\167"+
    "\2\0\1\170\4\0\1\170\1\0\1\170\1\0\1\167"+
    "\3\0\1\167\2\0\2\170\17\0\1\141\14\0\1\141"+
    "\4\0\1\141\1\0\1\141\10\0\2\141\20\0\1\171"+
    "\11\0\1\171\61\0\1\52\60\0\1\52\51\0\1\172"+
    "\56\0\1\173\56\0\1\142\62\0\1\52\57\0\1\52"+
    "\44\0\1\174\76\0\1\52\44\0\1\52\44\0\1\52"+
    "\57\0\1\165\73\0\1\175\46\0\1\176\43\0\1\77"+
    "\62\0\1\112\60\0\1\177\45\0\1\113\67\0\1\200"+
    "\6\0\1\52\34\0\1\52\74\0\1\201\22\0\1\170"+
    "\14\0\1\170\4\0\1\170\1\0\1\170\10\0\2\170"+
    "\20\0\1\202\11\0\1\202\75\0\1\52\36\0\1\203"+
    "\60\0\1\204\54\0\1\205\65\0\1\206\45\0\1\207"+
    "\65\0\1\210\55\0\1\116\56\0\1\211\57\0\1\165"+
    "\47\0\1\212\66\0\1\52\51\0\1\142\41\0\1\153"+
    "\64\0\1\213\70\0\1\214\37\0\1\215\56\0\1\216"+
    "\52\0\1\217\57\0\1\220\73\0\1\106\40\0\1\126"+
    "\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6072];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\5\11\21\1\1\0\2\1\10\0"+
    "\1\1\1\11\26\0\1\11\1\0\1\1\23\0\1\1"+
    "\6\0\3\1\3\0\1\1\22\0\1\1\1\0\1\11"+
    "\10\0\1\11\16\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PowerShellLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 15: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 16: break;
          case 3: 
            { return DOT;
            } 
            // fall through
          case 17: break;
          case 4: 
            { return COMMA;
            } 
            // fall through
          case 18: break;
          case 5: 
            { return SEMICOLON;
            } 
            // fall through
          case 19: break;
          case 6: 
            { return PARENTHESES;
            } 
            // fall through
          case 20: break;
          case 7: 
            { return BRACES;
            } 
            // fall through
          case 21: break;
          case 8: 
            { return BRACKETS;
            } 
            // fall through
          case 22: break;
          case 9: 
            { return DECIMAL_INTEGER_LITERAL;
            } 
            // fall through
          case 23: break;
          case 10: 
            { return SINGLE_LINE_COMMENT;
            } 
            // fall through
          case 24: break;
          case 11: 
            { return REAL_LITERAL;
            } 
            // fall through
          case 25: break;
          case 12: 
            { return KEYWORD;
            } 
            // fall through
          case 26: break;
          case 13: 
            { return HEXADECIMAL_INTEGER_LITERAL;
            } 
            // fall through
          case 27: break;
          case 14: 
            { return DELIMITED_COMMENT;
            } 
            // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
