/**
* PowerShell grammar.
*
* @see grammar reference: https://learn.microsoft.com/en-us/powershell/scripting/lang-spec/chapter-15?view=powershell-7.3
*
* @author Boris Pronin
*/

{
//    generate = [
//        psi = 'no'
//        exact-types = 'elements'
//        java = '8'
//    ]

    elementTypeClass="com.bopr.intellij.iipowershell.language.psi.PowerShellElementType"
    elementTypeHolderClass="com.bopr.intellij.iipowershell.language.psi.PowerShellTypes"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
    parserClass="com.bopr.intellij.iipowershell.parser.PowerShellParser"
    psiClassPrefix="PowerShell"
    psiImplClassSuffix="Impl"
    psiImplPackage="com.bopr.intellij.iipowershell.language.psi.impl"
    psiImplUtilClass="com.bopr.intellij.iipowershell.language.psi.PowerShellPsiUtil"
    psiPackage="com.bopr.intellij.iipowershell.psi"
    tokenTypeClass="com.bopr.intellij.iipowershell.language.psi.PowerShellTokenType"

   /* NOTE: In generated flex file change (.|\n) to ([^]|\n) */
    tokens = [
        SIGNATURE = 'regexp:# SIG # Begin signature block\n(#(.|\n)*)+# SIG # End signature block'
        REQUIRES_COMMENT = 'regexp:#\s*requires\s+.*'
        LINE_COMMENT = 'regexp:#.*'
        BLOCK_COMMENT = 'regexp:<#(.|\n)*#>'
        DECIMAL_INTEGER_LITERAL = 'regexp:[+\-–—―]?\d+[ld]?([kmgtp]b)?'
        HEXADECIMAL_INTEGER_LITERAL = 'regexp:[+\-–—―]?0x[0-9da-f]+[ld]?([kmgtp]b)?'
        REAL_LITERAL = 'regexp:[+\-–—―]?\d*\.\d+(e\d+[ld]?([kmgtp]b)?)?'
        KEYWORD = 'regexp:(begin|break|catch|class|continue|data|define|do|dynamicparam|else|elseif|end|exit|filter|finally|for|foreach|from|function|if|in|inlinescript|parallel|param|process|return|switch|throw|trap|try|until|using|var|while|workflow)'

        REGULAR_VARIABLE = 'regexp:[$@][\w_?:]+'
        BRACED_VARIABLE = 'regexp:\$\{[^}]+[^`]}'

        LABEL = 'regexp::\w+'
        STRING_LITERAL = 'regexp:["“”„]([^$`"“”„]|"")*\$?["“”„]'

        ASSIGNMENT_OPERATOR = 'regexp:[+*/%\-–—―]?='
        FILE_REDIRECTION_OPERATOR = 'regexp:[><]|(>>)|(2>)|(2>>)|(3>)|(3>>)|(4>)|(4>>)|(5>)|(5>>)|(6>)|(6>>)|(\*>)|(\*>>)'
        MERGING_REDIRECTION_OPERATOR = 'regexp:(\*>&1)|(2>&1)|(3>&1)|(4>&1)|(5>&1)|(6>&1)|(\*>&2)|(1>&2)|(3>&2)|(4>&2)|(5>&2)|(6>&2)'
        FORMAT_OPERATOR = 'regexp:[\-–—―]f'
        COMPARISON_OPERATOR = 'regexp:[\-–—―]([ic]?(contains|notcontains)|in|notin)'
        LOGICAL_OPERATOR = 'regexp:[\-–—―]and|or|xor'
        BITWISE_LOGICAL_OPERATOR = 'regexp:[\-–—―]band|bor|bxor'
        LOGICAL_NOT_OPERATOR = 'regexp:[\-–—―]not'
        BITWISE_LOGICAL_NOT_OPERATOR = 'regexp:[\-–—―]bnot'
        SPLIT_OPERATOR = 'regexp:[\-–—―]split'
        JOIN_OPERATOR = 'regexp:[\-–—―]join'
        SYMBOLIC_OPERATOR = 'regexp:(\.\.)|(::)|(&&)|(\|\|)|[!&|;,.\-–—―+*/%]'

        FILE_PARAM = 'regexp:[\-–—―]file'
        SUPPORTED_COMMAND_PARAM = 'regexp:[\-–—―]supportedcommand'
        SWITCH_PARAM = 'regexp:[\-–—―](regex|wildcard|exact|casesensitive|parallel)'
        COMMAND_PARAMETER = 'regexp:[\-–—―]\w+[?\w]+;?'

        GENERIC_TOKEN = "regexp:\w+[\-–—―?\w]+"
        GENERIC_TOKEN_WITH_SUBEXPR_START = "regexp:\w+[\-–—―?\w]+\$\("

        DASH = 'regexp:[\-–—―]'
        DASH_DASH = 'regexp:[\-–—―][\-–—―]'
        BRACE = 'regexp:[{}]|(@\{)'
        BRACKET = 'regexp:[\[\]]'
        PARENTHESIS = 'regexp:[()]|(\$\()|(@\()'
        DOLLAR = '$'
        DOUBLE_QUOTE = 'regexp:["“”„]'
        SIMPLE_NAME = 'regexp:[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}_][\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nd}_]+'
        TYPE_NAME = 'regexp:[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nd}_][\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}_]+'
        ARRAY_TYPE_NAME = 'regexp:\[\w+[\-–—―?\w]+]\['
        GENERIC_TYPE_NAME = 'regexp:\[\w+[\-–—―?\w]+]\['
    ]
    
    name('.*expression') = 'expression'
    name('.*statement') = 'statement'
    name('.*operator') = 'operator'
//    name('.*literal') = 'literal'
}

root ::=
    script-file
//  | module-file
//  | interactive-input
//  | data-file
    
variable ::=
    REGULAR_VARIABLE
  | BRACED_VARIABLE

//braced-variable-character ::=
//    !('}' | '`')
//  | escaped-character
//
//escaped-character ::=
//  '`'   //(The backtick character U+0060) followed by any Unicode character

/* B.1.7 Commands */

//private generic-token ::=
//    generic-token-part
//
//private generic-token-part ::=
////    expandable-string-literal
////  | verbatim-here-string-literal
//   variable
//  | generic-token-chars
//
//private generic-token-chars ::=
//    GENERIC_TOKEN
////    Any Unicode character except
////        { } ( ) ; , | & . [
////        colon
////        whitespace
////        new-line-character
//
//private generic-token-with-subexpr-start ::=
//    generic-token-part+ '$('

/* B.1.8 Parameters*/

// first-parameter-char:
//     A Unicode character of classes Lu, Ll, Lt, Lm, or Lo
//     _ (The underscore character U+005F)
//     ?
//
// parameter-chars:
//     parameter-char
//     parameter-chars parameter-char
//
// parameter-char:
//     Any Unicode character except
//         { } ( ) ; , | & . [
//         colon
//         whitespace
//         new-line-character
//
// colon:
//     : (The colon character U+003A)

//verbatim-command-argument-chars ::=
//     verbatim-command-argument-part+
//
//verbatim-command-argument-part ::=
//     verbatim-command-string
//     | '&' non-ampersand-character
//     | non-vert-line-character
//
//non-ampersand-character ::=
//    !'&'
//
//non-vert-line-character ::=
//    !'|'
//
//verbatim-command-string ::=
//     double-quote-character non-double-quote-chars
//   | double-quote-character
//
//non-double-quote-chars ::=
////todo: DOES NOT WORK
//    (!double-quote-character)+

/* B.1.9 Literals */

private literal ::=
    DECIMAL_INTEGER_LITERAL
  | HEXADECIMAL_INTEGER_LITERAL
  | REAL_LITERAL
  | STRING_LITERAL

/* B.1.9.3 String Literals */

//string-literal ::=
//    STRING
//    expandable-string-literal
//  | expandable-here-string-literal
//    verbatim-string-literal
//    verbatim-here-string-literal

//expandable-string-literal ::=
//    double-quote-character expandable-string-characters? dollars? double-quote-character
//
//private double-quote-character ::=
//    '"' | '“' | '”' | '„'
//
//expandable-string-characters ::=
//    expandable-string-part+
//
//expandable-string-part ::=
//    !('$' | double-quote-character | '`')
//  | braced-variable
//  | '$' !('(' |'{' | double-quote-character | '`')
//  | '$' escaped-character
//  | escaped-character
//  | double-quote-character double-quote-character

/*
    Any Unicode character except
        $
        double-quote-character
        ` (The backtick character U+0060)
    braced-variable
    $ Any Unicode character except
        (
        {
        double-quote-character
        ` (The backtick character U+0060)*
    $ escaped-character
    escaped-character
    double-quote-character double-quote-character
*/

//dollars ::=
//    '$'+
//
//expandable-here-string-literal ::=
//    '@' double-quote-character whitespace? new-line
//        expandable-here-string-characters? new-line double-quote-character '@'
//
//expandable-here-string-characters ::=
//    expandable-here-string-part+
//
//expandable-here-string-part ::=
//    !('$' | new-line)
////  | braced-variable
//  | '$' !( '('| new-line)
//  | '$' new-line !double-quote-character
//  | '$' new-line double-quote-character !'@'
//  | new-line !double-quote-character
//  | new-line double-quote-character !'@'

//expandable-string-with-subexpr-start:
//    double-quote-character  expandable-string-chars?  $(
//
//expandable-string-with-subexpr-end:
//    double-quote-char
//
//expandable-here-string-with-subexpr-start:
//    @  double-quote-character whitespace? new-line-character expandable-here-string-chars?  $(
//
//expandable-here-string-with-subexpr-end:
//    new-line-character  double-quote-character  @
//
//verbatim-string-literal:
//    single-quote-character verbatim-string-characters? single-quote-char
//
//single-quote-character:
//    ' (U+0027)
//    Left single quotation mark (U+2018)
//    Right single quotation mark (U+2019)
//    Single low-9 quotation mark (U+201A)
//    Single high-reversed-9 quotation mark (U+201B)
//
//verbatim-string-characters:
//    verbatim-string-part
//    verbatim-string-characters verbatim-string-part
//
//verbatim-string-part:
//    *Any Unicode character except* single-quote-character
//    single-quote-character  single-quote-character
//
//verbatim-here-string-literal:
//    @ single-quote-character whitespace?  new-line-character
//        verbatim-here-string-characters?  new-line-character
//            single-quote-character *@*
//
//verbatim-*here-string-characters:
//    verbatim-here-string-part
//    verbatim-here-string-characters  verbatim-here-string-part
//
//verbatim-here-string-part:
//    Any Unicode character except* new-line-character
//    new-line-character  Any Unicode character except single-quote-character
//    new-line-character  single-quote-character  Any Unicode character except @

/* B.1.10 Simple Names */

//private simple-name ::=
//    GENERIC_TOKEN
////        SIMPLE_NAME = 'regexp:[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}_][\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nd}_]+'

/* B.1.11 Type Names */

//private type-name ::=
//    type-identifier ('.' type-identifier)*
//
//private type-identifier ::=
//    type-characters
//
//private type-characters ::=
//    GENERIC_TOKEN
////  TYPE_NAME = 'regexp:[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nd}_][\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}_]+'
//
//private array-type-name ::=
//    type-name '['
//
//private generic-type-name ::=
//    type-name '['

/** B.2 Syntactic grammar **/

/* B.2.1 Basic concepts */

script-file ::=
    script-block

//module-file ::=
//    script-block
//
//interactive-input ::=
//    script-block
//
//data-file ::=
//    statement-list

/* B.2.2 Statements */

script-block ::=
    param-block? statement-terminators? script-block-body?

param-block ::=
    attribute-list? 'param' '(' parameter-list? ')'

private parameter-list ::=
    script-parameter (',' script-parameter)*

script-parameter ::=
    attribute-list? variable script-parameter-default?

script-parameter-default ::=
    '=' expression

private script-block-body ::=
    named-block-list
  | statement-list

private named-block-list ::=
    named-block+

named-block ::=
    block-name statement-block statement-terminators?

block-name ::=
    'dynamicparam' | 'begin' | 'process' | 'end'

statement-block ::=
    '{' statement-list? '}'

private statement-list ::=
    statement+

private statement ::=
    if-statement
  | LABEL? labeled-statement
  | function-statement
  | flow-control-statement STATEMENT_TERMINATOR?
  | trap-statement
  | try-statement
  | data-statement
  | inlinescript-statement
  | parallel-statement
  | sequence-statement
  | pipeline STATEMENT_TERMINATOR?

private statement-terminators ::=
    STATEMENT_TERMINATOR+

if-statement ::=
    'if' '(' pipeline ')' statement-block elseif-clauses? else-clause?

private elseif-clauses ::=
    elseif-clause+

elseif-clause ::=
    'elseif' ( pipeline ) statement-block

else-clause ::=
    'else' statement-block

private labeled-statement ::=
    switch-statement
  | foreach-statement
  | for-statement
  | while-statement
  | do-statement

switch-statement ::=
    'switch' switch-parameters? switch-condition switch-body

private switch-parameters ::=
    switch-parameter+

switch-parameter ::=
    SWITCH_PARAM

switch-condition ::=
    '(' pipeline ')'
   | FILE_PARAM switch-filename

switch-filename ::=
    command-argument
  | primary-expression

switch-body ::=
    '{' switch-clauses switch-default-clause? '}'

private switch-clauses ::=
    switch-clause+

switch-clause ::=
    switch-clause-condition statement-block statement-terminators?

switch-default-clause ::=
    'default' statement-block statement-terminators?

switch-clause-condition ::=
    command-argument
  | primary-expression

foreach-statement ::=
    'foreach' '(' variable 'in' pipeline ')' statement-block

for-statement ::=
    'for' '(' for-initializer? STATEMENT_TERMINATOR
        for-condition? STATEMENT_TERMINATOR for-iterator? ')' statement-block
  | 'for' '(' for-initializer? STATEMENT_TERMINATOR
        for-condition? ')' statement-block
  | 'for' '(' for-initializer? ')' statement-block

for-initializer ::=
    pipeline

for-condition ::=
    pipeline

for-iterator ::=
    pipeline

while-statement ::=
    'while' '(' while-condition ')' statement-block

do-statement ::=
    'do' statement-block ('while' | 'until') '(' while-condition ')'

while-condition ::=
    pipeline

function-statement ::=
    ('function'| 'filter'| 'workflow') function-name function-parameter-declaration? '{' script-block '}'

function-name ::=
    command-argument

function-parameter-declaration ::=
    '(' parameter-list ')'

flow-control-statement ::=
    'break' label-expression?
  | 'continue' label-expression?
  | 'throw' pipeline?
  | 'return' pipeline?
  | 'exit' pipeline?

label-expression ::=
    SIMPLE_NAME
  | unary-expression

trap-statement ::=
    'trap' type-literal? statement-block

try-statement ::=
    'try' statement-block ((catch-clauses finally-clause) | (catch-clauses | finally-clause))

private catch-clauses ::=
    catch-clause+

catch-clause ::=
    'catch' catch-type-list? statement-block

catch-type-list ::=
    type-literal (',' type-literal)*

finally-clause ::=
    'finally' statement-block

data-statement ::=
    'data' data-name? data-commands-allowed? statement-block

data-name ::=
    SIMPLE_NAME

data-commands-allowed ::=
    SUPPORTED_COMMAND_PARAM data-commands-list

data-commands-list ::=
    data-command (',' data-command)*

data-command ::=
    command-name-expr

inlinescript-statement ::=
    'inlinescript' statement-block

parallel-statement ::=
    'parallel' statement-block

sequence-statement ::=
    'sequence' statement-block

pipeline ::=
    assignment-expression
  | expression redirections? pipeline-tail?
  | command verbatim-command-argument? pipeline-tail?

assignment-expression ::=
    expression ASSIGNMENT_OPERATOR statement

pipeline-tail ::=
    '|' command ('|' command)*

command ::=
    command-name command-element*
  | command-invocation-operator command-module? command-name-expr command-element*

command-invocation-operator ::=
    '&' | '.'

command-module ::=
    primary-expression

command-name ::=
    GENERIC_TOKEN
  | generic-token-with-subexpr

generic-token-with-subexpr ::=
//    No whitespace is allowed between ) and command-name.
    GENERIC_TOKEN_WITH_SUBEXPR_START statement-list? ')' command-name

private command-name-expr ::=
    command-name
  | primary-expression

private command-element ::=
    COMMAND_PARAMETER
  | command-argument
  | redirections

command-argument ::=
    command-name-expr

verbatim-command-argument ::=
    '--%' VERBATIM_COMMAND_ARGUMENT_CHARS

redirections ::=
    redirection+

redirection ::=
    MERGING_REDIRECTION_OPERATOR
  | FILE_REDIRECTION_OPERATOR redirected-file-name

redirected-file-name ::=
    command-argument
  | primary-expression

/* B.2.3 Expressions */

private expression ::=
    logical-expression

logical-expression ::=
    bitwise-expression (LOGICAL_OPERATOR bitwise-expression)*

bitwise-expression ::=
    comparison-expression (BITWISE_LOGICAL_OPERATOR comparison-expression)*

comparison-expression ::=
    additive-expression (COMPARISON_OPERATOR additive-expression)*

additive-expression ::=
    multiplicative-expression (('+' | DASH) multiplicative-expression)*

multiplicative-expression ::=
    format-expression (('\*' | '/' | '%') format-expression)*

format-expression ::=
    range-expression (FORMAT_OPERATOR range-expression)*

range-expression ::=
    array-literal-expression ('..' array-literal-expression)*

array-literal-expression ::=
    unary-expression (',' unary-expression)*

unary-expression ::=
    primary-expression
  | expression-with-unary-operator

expression-with-unary-operator ::=
    ',' unary-expression
  | LOGICAL_NOT_OPERATOR unary-expression
  | '!' unary-expression
  | BITWISE_LOGICAL_NOT_OPERATOR unary-expression
  | '+' unary-expression
  | DASH unary-expression
  | pre-increment-expression
  | pre-decrement-expression
  | cast-expression
  | SPLIT_OPERATOR unary-expression
  | JOIN_OPERATOR unary-expression

pre-increment-expression ::=
    '++' unary-expression

pre-decrement-expression ::=
    DASH_DASH unary-expression

cast-expression ::=
    type-literal unary-expression

//private attributed-expression ::=
//    type-literal variable

primary-expression ::=
    value
//  | member-access
//  | element-access
//  | invocation-expression
//  | post-increment-expression
//  | post-decrement-expression
//
//   invocation-expression
//    member-access
//  | element-access
//  | post-increment-expression
//  | post-decrement-expression
//  | value

value ::=
    parenthesized-expression
  | sub-expression
  | array-expression
  | script-block-expression
  | hash-literal-expression
  | literal
  | type-literal
  | variable

private parenthesized-expression ::=
    '(' pipeline ')'

sub-expression ::=
    '$(' statement-list? ')'

array-expression ::=
    '@(' statement-list? ')'

script-block-expression ::=
    '{' script-block '}'

hash-literal-expression ::=
    '@{' hash-literal-body? '}'

hash-literal-body ::=
    hash-entry (statement-terminators hash-entry)*

hash-entry ::=
    key-expression '=' statement

key-expression ::=
    SIMPLE_NAME
  | unary-expression

post-increment-expression ::=
//    primary-expression '++'
    value '++'

post-decrement-expression ::=
//    primary-expression dashdash
    value DASH_DASH

member-access ::=
// Note no whitespace is allowed after primary-expression.
//    primary-expression '.' member-name
////  | primary-expression '::' member-name
    value (('.' | '::') member-name)*

element-access ::=
// Note no whitespace is allowed between primary-expression and [.
//    primary-expression '[' expression ']'
    value '[' expression ']'

invocation-expression ::=
// Note no whitespace is allowed after primary-expression.
//   primary-expression '.' member-name argument-list
//   | primary-expression  '::' member-name argument-list
    value (('.' | '::') member-name argument-list)

argument-list ::=
    '(' argument-expression-list? ')'

argument-expression-list ::=
    argument-expression (',' argument-expression)*

argument-expression ::=
    logical-argument-expression

logical-argument-expression ::=
   bitwise-argument-expression (LOGICAL_OPERATOR bitwise-argument-expression)*

bitwise-argument-expression ::=
    comparison-argument-expression (BITWISE_LOGICAL_OPERATOR comparison-argument-expression)*

comparison-argument-expression ::=
    additive-argument-expression (COMPARISON_OPERATOR additive-argument-expression)*

additive-argument-expression ::=
    multiplicative-argument-expression (('+' | DASH) multiplicative-argument-expression)*

multiplicative-argument-expression ::=
    format-argument-expression (('/*' | '/' | '%') format-argument-expression)*

format-argument-expression ::=
    range-argument-expression (FORMAT_OPERATOR range-argument-expression)*

range-argument-expression ::=
    unary-expression
  | range-expression '..' unary-expression

member-name ::=
    SIMPLE_NAME
  | STRING_LITERAL
//  | string-literal-with-subexpression
  | expression-with-unary-operator
  | value

//string-literal-with-subexpression ::=
//    expandable-string-literal-with-subexpr
//    expandable-here-string-literal-with-subexpr
//
//expandable-string-literal-with-subexpr ::=
//    expandable-string-with-subexpr-start statement-list? )
//        expandable-string-with-subexpr-characters expandable-string-with-subexpr-end
//    expandable-here-string-with-subexpr-start statement-list? )
//        expandable-here-string-with-subexpr-characters
//        expandable-here-string-with-subexpr-end
//
//expandable-string-with-subexpr-characters ::=
//    expandable-string-with-subexpr-part
//    expandable-string-with-subexpr-characters expandable-string-with-subexpr-part
//
//expandable-string-with-subexpr-part ::=
//    sub-expression
//    expandable-string-part
//
//expandable-here-string-with-subexpr-characters ::=
//    expandable-here-string-with-subexpr-part
//    expandable-here-string-with-subexpr-characters expandable-here-string-with-subexpr-part
//
//expandable-here-string-with-subexpr-part ::=
//    sub-expression
//    expandable-here-string-part

type-literal ::=
    '[' type-spec ']'

private type-spec ::=
    ARRAY_TYPE_NAME dimension* ']'
  | GENERIC_TYPE_NAME generic-type-arguments ']'
  | TYPE_NAME

private dimension ::=
    ','

private generic-type-arguments ::=
    type-spec (',' type-spec)*

/* B.2.4 Attributes */

private attribute-list ::=
    attribute+

attribute ::=
    '[' attribute-name '(' attribute-arguments ')' ']'
  | type-literal

attribute-name ::=
    type-spec

private attribute-arguments ::=
    attribute-argument*

attribute-argument ::=
    expression
  | SIMPLE_NAME
  | SIMPLE_NAME '=' expression

