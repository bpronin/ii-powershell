/**
* PowerShell grammar.
*
* @see grammar reference: https://learn.microsoft.com/en-us/powershell/scripting/lang-spec/chapter-15?view=powershell-7.3
*
* @author Boris Pronin
*/

{
    elementTypeClass="com.bopr.intellij.iipowershell.language.psi.PowerShellElementType"
    elementTypeHolderClass="com.bopr.intellij.iipowershell.language.psi.PowerShellTypes"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
    parserClass="com.bopr.intellij.iipowershell.parser.PowerShellParser"
    psiClassPrefix="PowerShell"
    psiImplClassSuffix="Impl"
    psiImplPackage="com.bopr.intellij.iipowershell.language.psi.impl"
    psiImplUtilClass="com.bopr.intellij.iipowershell.language.psi.PowerShellPsiUtil"
    psiPackage="com.bopr.intellij.iipowershell.psi"
    tokenTypeClass="com.bopr.intellij.iipowershell.language.psi.PowerShellTokenType"

   /* NOTE: In generated flex file change (.|\n) to ([^]|\n) */
    tokens = [
        SIGNATURE_CONTENT = 'regexp:(?i)# SIG # Begin signature block\n(#(.|\n)*)+# SIG # End signature block'
        REQUIRES_COMMENT = 'regexp:(?i)#\s*requires\s+.*'
        LINE_COMMENT = 'regexp:#.*'
        BLOCK_COMMENT = 'regexp:<#(.|\n)*#>'
        REAL_NUMBER = 'regexp:(?i)[+\-–—―]?\d*\.\d+(e\d+[ld]?([kmgtp]b)?)?'
        DECIMAL_INTEGER_NUMBER = 'regexp:(?i)[+\-–—―]?\d+[ld]?([kmgtp]b)?'
        HEXADECIMAL_INTEGER_NUMBER = 'regexp:(?i)[+\-–—―]?0x[0-9da-f]+[ld]?([kmgtp]b)?'
        RESERVED_VARIABLE_NAME = 'regexp:\$\$|\$\?|\$\^|\$_'
        KEYWORD_NAME = 'regexp:(?i)(begin|break|catch|class|continue|data|define|do|dynamicparam|else|elseif|end|exit|filter|finally|for|foreach|from|function|if|in|inlinescript|parallel|param|process|return|switch|throw|trap|try|until|using|var|while|workflow)'
        VARIABLE_NAME = 'regexp:[$@][\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nd}_?:]+'
        BRACED_VARIABLE_NAME = 'regexp:\$\{[^}]+}'
        LABEL_NAME = 'regexp:(?i):\w+'
        STRING = 'regexp:["“”„]([^$`"“”„]|"")*\$?["“”„]'
        ASSIGNMENT_OPERATOR = 'regexp:[+*/%\-–—―]?='
        INCREMENT_OPERATOR = 'regexp:([\-–—―]{2})|(\+\+)'
        FILE_REDIRECTION_OPERATOR = 'regexp:[><]|(>>)|(2>)|(2>>)|(3>)|(3>>)|(4>)|(4>>)|(5>)|(5>>)|(6>)|(6>>)|(\*>)|(\*>>)'
        MERGING_REDIRECTION_OPERATOR = 'regexp:(\*>&1)|(2>&1)|(3>&1)|(4>&1)|(5>&1)|(6>&1)|(\*>&2)|(1>&2)|(3>&2)|(4>&2)|(5>&2)|(6>&2)'
        T_FORMAT_OPERATOR = 'regexp:(?i)[\-–—―]f'
        PREFIXED_OPERATOR = 'regexp:(?i)[\-–—―](shl|shr|in|notin|isnot|is|as)'
        IC_PREFIXED_OPERATOR = 'regexp:(?i)[\-–—―][ic]?(eq|ne|gt|lt|le|ge|match|notmatch|replace|like|notlike|contains|notcontains|split|join)'
        LOGICAL_OPERATOR = 'regexp:(?i)[\-–—―]and|or|xor'
        BITWISE_LOGICAL_OPERATOR = 'regexp:(?i)[\-–—―]band|bor|bxor'
        LOGICAL_NOT_OPERATOR = 'regexp:(?i)[\-–—―]not'
        BITWISE_LOGICAL_NOT_OPERATOR = 'regexp:(?i)[\-–—―]bnot'
        SPLIT_OPERATOR = 'regexp:(?i)[\-–—―]split'
        JOIN_OPERATOR = 'regexp:(?i)[\-–—―]join'
        FILE_PARAM = 'regexp:(?i)[\-–—―]file'
        SUPPORTED_COMMAND_PARAM = 'regexp:(?i)[\-–—―]supportedcommand'
        SWITCH_PARAM = 'regexp:(?i)[\-–—―](regex|wildcard|exact|casesensitive|parallel)'
        COMMAND_PARAMETER_NAME = 'regexp:(?i)[\-–—―]\w+[?\w]+;?'
        GENERIC_TOKEN = "regexp:(?i)\w+[\-–—―?\w]+"
        ARITHMETIC_OPERATOR = 'regexp:[\-–—―+*/%]'
        SYMBOLIC_OPERATOR = 'regexp:(\.\.)|(::)|(&&)|(\|\|)|[!&|;,.]'
        BRACE = 'regexp:[{}]|(@\{)'
        BRACKET = 'regexp:[\[\]]'
        PARENTHESIS = 'regexp:[()]|(\$\()|(@\()'

//        SIMPLE_NAME = 'regexp:[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}_][\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nd}_]+'
//        DASH = 'regexp:[\-–—―]'
//        DASH_DASH = 'regexp:[\-–—―]{2}'
//        QUOTE = 'regexp:["“”„]'
//        NUMBER_SIGN = 'regexp:[+\-–—―]'
//        HEX_DIGITS='regexp:[\da-fA-F]'
//        INTEGER_NUMBER_SUFFIX = 'regexp:[lLdD]'
//        REAL_NUMBER_EXPONENT = 'regexp:[eE]\d+[lLdD]?(([kK]|[mM]|[gG]|[tT]|[pP])[bB])'
//        NUMBER_MULTIPLIER = 'regexp:([kK]|[mM]|[gG]|[tT]|[pP])[bB]'
//        STRING_CONTENT = 'regexp:([^$`"“”„]|""|)*\$?'
    ]
}


/** B.2 Syntactic grammar **/
root ::=
    script-file
//  | module-file
//  | interactive-input
//  | data-file
    
/** B.1 Lexical grammar **/

//root ::=
//    element* signature?

private element ::=
    token
  | comment
  | whitespace

signature ::=
    SIGNATURE_CONTENT

/* B.1.1 Line terminators */

private new-line ::=
     'regexp:[\r\n]|\r\n'

private new-lines ::=
     new-line*

private dash ::=
    'regexp:[\-–—―]'

private dashdash ::=
    dash dash

/* B.1.2 Comments */

comment ::=
    single-line-comment
  | requires-comment
  | delimited-comment

private single-line-comment ::=
    LINE_COMMENT

private delimited-comment ::=
    BLOCK_COMMENT

private requires-comment ::=
    REQUIRES_COMMENT

/* B.1.3 White space */

private whitespace ::=
//    BLANK_SPACE
    'regexp:\s+'
  | '`' new-line

/* B.1.4 Tokens */

private token ::=
    keyword
  | variable
  | command
  | command-parameter
  | command-argument
  | literal
  | type-literal
  | operator-or-punctuator

/* B.1.5 Keywords */

private keyword ::=
    KEYWORD_NAME

/* B.1.6 Variables */

variable ::=
    RESERVED_VARIABLE_NAME
  | VARIABLE_NAME
  | BRACED_VARIABLE_NAME

/* B.1.7 Commands */

private generic-token ::=
    generic-token-part

private generic-token-part ::=
//    expandable-string-literal
//  | verbatim-here-string-literal
   variable
  | generic-token-chars

private generic-token-chars ::=
    GENERIC_TOKEN
//    Any Unicode character except
//        { } ( ) ; , | & . [
//        colon
//        whitespace
//        new-line-character

private generic-token-with-subexpr-start ::=
    generic-token-part+ '$('

/* B.1.8 Parameters*/

command-parameter ::=
    COMMAND_PARAMETER_NAME

// first-parameter-char:
//     A Unicode character of classes Lu, Ll, Lt, Lm, or Lo
//     _ (The underscore character U+005F)
//     ?
//
// parameter-chars:
//     parameter-char
//     parameter-chars parameter-char
//
// parameter-char:
//     Any Unicode character except
//         { } ( ) ; , | & . [
//         colon
//         whitespace
//         new-line-character
//
// colon:
//     : (The colon character U+003A)
//
// verbatim-command-argument-chars:
//     verbatim-command-argument-part
//     verbatim-command-argument-chars verbatim-command-argument-part
//
// verbatim-command-argument-part:
//     verbatim-command-string
//     & non-ampersand-character
//     Any Unicode character except
//         |
//         new-line-character
//
// non-ampersand-character:
//     Any Unicode character except &
//
// verbatim-command-string:
//     double-quote-character non-double-quote-chars
//     double-quote-character
//
// non-double-quote-chars:
//     non-double-quote-char
//     non-double-quote-chars non-double-quote-char
//
// non-double-quote-char:
//     Any Unicode character except
//         double-quote-character

/* B.1.9 Literals */

private literal ::=
    integer-literal
  | real-literal
  | string-literal

/* B.1.9.1 Integer Literals */

integer-literal ::=
    decimal-integer-literal | hexadecimal-integer-literal

private decimal-integer-literal ::=
    DECIMAL_INTEGER_NUMBER

private hexadecimal-integer-literal ::=
    HEXADECIMAL_INTEGER_NUMBER

/* B.1.9.2 Real Literals */

real-literal ::=
    REAL_NUMBER

/* B.1.9.3 String Literals */

string-literal ::=
    STRING

//string-literal:
//    expandable-string-literal
//    expandable-here-string-literal
//    verbatim-string-literal
//    verbatim-here-string-literal
//
//expandable-string-literal:
//    double-quote-character expandable-string-characters?  dollars? double-quote-character
//
//double-quote-character:
//    " (U+0022)
//    Left double quotation mark (U+201C)
//    Right double quotation mark (U+201D)
//    Double low-9 quotation mark (U+201E)
//
//expandable-string-characters:
//      expandable-string-part
//      expandable-string-characters
//      expandable-string-part
//
//expandable-string-part:
//    Any Unicode character except
//        $
//        double-quote-character
//        ` (The backtick character U+0060)
//    braced-variable
//    $ Any Unicode character except
//        (
//        {
//        double-quote-character
//        ` (The backtick character U+0060)*
//    $ escaped-character
//    escaped-character
//    double-quote-character double-quote-character
//
//dollars:
//    $
//    dollars $
//
//expandable-here-string-literal:
//    @  double-quote-character  whitespace?  new-line-character
//        expandable-here-string-characters?  new-line-character  double-quote-character  @
//
//expandable-here-string-characters:
//    expandable-here-string-part
//    expandable-here-string-characters  expandable-here-string-part
//
//expandable-here-string-part:
//    Any Unicode character except
//        $
//        new-line-character
//    braced-variable
//    $ Any Unicode character except
//        (
//        new-line-character
//    $ new-line-character  Any Unicode character except double-quote-char
//    $ new-line-character double-quote-char  Any Unicode character except @
//    new-line-character  Any Unicode character except double-quote-char
//    new-line-character double-quote-char  Any Unicode character except @
//
//expandable-string-with-subexpr-start:
//    double-quote-character  expandable-string-chars?  $(
//
//expandable-string-with-subexpr-end:
//    double-quote-char
//
//expandable-here-string-with-subexpr-start:
//    @  double-quote-character whitespace? new-line-character expandable-here-string-chars?  $(
//
//expandable-here-string-with-subexpr-end:
//    new-line-character  double-quote-character  @
//
//verbatim-string-literal:
//    single-quote-character verbatim-string-characters? single-quote-char
//
//single-quote-character:
//    ' (U+0027)
//    Left single quotation mark (U+2018)
//    Right single quotation mark (U+2019)
//    Single low-9 quotation mark (U+201A)
//    Single high-reversed-9 quotation mark (U+201B)
//
//verbatim-string-characters:
//    verbatim-string-part
//    verbatim-string-characters verbatim-string-part
//
//verbatim-string-part:
//    *Any Unicode character except* single-quote-character
//    single-quote-character  single-quote-character
//
//verbatim-here-string-literal:
//    @ single-quote-character whitespace?  new-line-character
//        verbatim-here-string-characters?  new-line-character
//            single-quote-character *@*
//
//verbatim-*here-string-characters:
//    verbatim-here-string-part
//    verbatim-here-string-characters  verbatim-here-string-part
//
//verbatim-here-string-part:
//    Any Unicode character except* new-line-character
//    new-line-character  Any Unicode character except single-quote-character
//    new-line-character  single-quote-character  Any Unicode character except @

/* B.1.10 Simple Names */

private simple-name ::=
    GENERIC_TOKEN
//        SIMPLE_NAME = 'regexp:[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}_][\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nd}_]+'

//simple-name:
//    simple-name-first-char simple-name-chars
//
//simple-name-first-char:
//    A Unicode character of classes Lu, Ll, Lt, Lm, or Lo
//    _ (The underscore character U+005F)
//
//simple-name-chars:
//    simple-name-char
//    simple-name-chars simple-name-char
//
//simple-name-char:
//    A Unicode character of classes Lu, Ll, Lt, Lm, Lo, or Nd
//    _ (The underscore character U+005F)

/* B.1.11 Type Names */

private type-name ::=
    type-identifier ('.' type-identifier)*

private type-identifier ::=
    type-characters

private type-characters ::=
    GENERIC_TOKEN
//  TYPE_NAME = 'regexp:[\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}\p{Nd}_][\p{Lu}\p{Ll}\p{Lt}\p{Lm}\p{Lo}_]+'

private array-type-name ::=
    type-name '['

private generic-type-name ::=
    type-name '['

/* B.1.12 Operators and punctuators */

private operator-or-punctuator ::=
    BRACE
  | BRACKET
  | PARENTHESIS
  | SYMBOLIC_OPERATOR
  | INCREMENT_OPERATOR
  | ARITHMETIC_OPERATOR
  | LOGICAL_OPERATOR | BITWISE_LOGICAL_OPERATOR
  | LOGICAL_NOT_OPERATOR | BITWISE_LOGICAL_NOT_OPERATOR
  | SPLIT_OPERATOR | JOIN_OPERATOR
  | assignment-operator
  | merging-redirection-operator
  | file-redirection-operator
  | comparison-operator
  | format-operator

private comparison-operator ::=
    PREFIXED_OPERATOR
  | IC_PREFIXED_OPERATOR

private format-operator ::=
    T_FORMAT_OPERATOR

private assignment-operator ::=
    ASSIGNMENT_OPERATOR

private file-redirection-operator ::=
    FILE_REDIRECTION_OPERATOR

private merging-redirection-operator ::=
    MERGING_REDIRECTION_OPERATOR

/** B.2 Syntactic grammar **/

/* B.2.1 Basic concepts */

private script-file ::=
    script-block

private module-file ::=
    script-block

private interactive-input ::=
    script-block

private data-file ::=
    statement-list

/* B.2.2 Statements */

script-block ::=
    param-block? statement-terminators? script-block-body?

param-block ::=
    new-lines attribute-list? new-lines 'param' new-lines '(' parameter-list? new-lines ')'

private parameter-list ::=
    script-parameter (new-lines ',' script-parameter)*

script-parameter ::=
    new-lines attribute-list? new-lines variable script-parameter-default?

script-parameter-default ::=
    new-lines '=' new-lines expression

private script-block-body ::=
    named-block-list
  | statement-list

private named-block-list ::=
    named-block+

named-block ::=
    block-name statement-block statement-terminators?

block-name ::=
    'dynamicparam' | 'begin' | 'process' | 'end'

statement-block ::=
    new-lines '{' statement-list? new-lines '}'

private statement-list ::=
    statement+

private statement ::=
    if-statement
  | label? labeled-statement
//  | function-statement
  | flow-control-statement statement-terminator?
  | trap-statement
  | try-statement
  | data-statement
  | inlinescript-statement
  | parallel-statement
  | sequence-statement
  | pipeline statement-terminator?

private statement-terminator ::=
    ';'
  | new-line

private statement-terminators ::=
    statement-terminator+

if-statement ::=
    'if' new-lines '(' new-lines pipeline new-lines ')' statement-block elseif-clauses? else-clause?

private elseif-clauses ::=
    elseif-clause+

elseif-clause ::=
    new-lines 'elseif' new-lines ( new-lines pipeline new-lines ) statement-block

else-clause ::=
    new-lines 'else' statement-block

label ::=
    LABEL_NAME

labeled-statement ::=
    switch-statement
  | foreach-statement
//  | for-statement
  | while-statement
  | do-statement

switch-statement ::=
    'switch' new-lines switch-parameters? switch-condition switch-body

switch-parameters ::=
    switch-parameter+

switch-parameter ::=
    SWITCH_PARAM

switch-condition ::=
    '(' new-lines pipeline new-lines ')'
   | FILE_PARAM new-lines switch-filename

switch-filename ::=
    command-argument
  | primary-expression

switch-body ::=
    new-lines '{' new-lines switch-clauses switch-default-clause? '}'

private switch-clauses ::=
    switch-clause+

switch-clause ::=
    switch-clause-condition statement-block statement-terminators?

switch-default-clause ::=
    'default' statement-block statement-terminators?

switch-clause-condition ::=
    command-argument
  | primary-expression

foreach-statement ::=
    'foreach' new-lines '(' new-lines variable new-lines 'in' new-lines pipeline new-lines ')' statement-block

for-statement ::=
    'for' new-lines '(' new-lines for-initializer? statement-terminator
        new-lines for-condition? statement-terminator new-lines for-iterator? new-lines ')' statement-block
  | 'for' new-lines '(' new-lines for-initializer? statement-terminator
        new-lines for-condition? new-lines ')' statement-block
  | 'for' new-lines '(' new-lines for-initializer? new-lines ')' statement-block

for-initializer ::=
    pipeline

for-condition ::=
    pipeline

for-iterator ::=
    pipeline

while-statement ::=
    'while' new-lines '(' new-lines while-condition new-lines ')' statement-block

do-statement ::=
    'do' statement-block new-lines ('while' | 'until') new-lines '(' while-condition new-lines ')'

while-condition ::=
    new-lines pipeline

function-statement ::=
    'function' new-lines function-name function-parameter-declaration? '{' script-block '}'
  | 'filter' new-lines function-name function-parameter-declaration? '{' script-block '}'
  | 'workflow' new-lines function-name function-parameter-declaration? '{' script-block '}'

function-name ::=
    command-argument

function-parameter-declaration ::=
    new-lines '(' parameter-list new-lines ')'

flow-control-statement ::=
    'break' label-expression?
  | 'continue' label-expression?
  | 'throw' pipeline?
  | 'return' pipeline?
  | 'exit' pipeline?

label-expression ::=
    simple-name
  | unary-expression

trap-statement ::=
    'trap' new-lines type-literal? new-lines statement-block

try-statement ::=
    'try' statement-block ((catch-clauses finally-clause) | (catch-clauses | finally-clause))

private catch-clauses ::=
    catch-clause+

catch-clause ::=
    new-lines 'catch' catch-type-list? statement-block

catch-type-list ::=
    new-lines type-literal (new-lines ',' new-lines type-literal)*

finally-clause ::=
    new-lines 'finally' statement-block

data-statement ::=
    'data' new-lines data-name? data-commands-allowed? statement-block

data-name ::=
    simple-name

data-commands-allowed ::=
    new-lines SUPPORTED_COMMAND_PARAM data-commands-list

data-commands-list ::=
    new-lines data-command (',' new-lines data-command)*

data-command ::=
    command-name-expr

inlinescript-statement ::=
    'inlinescript' statement-block

parallel-statement ::=
    'parallel' statement-block

sequence-statement ::=
    'sequence' statement-block

private pipeline ::=
    assignment-expression
  | expression redirections? pipeline-tail?
//  | command verbatim-command-argument? pipeline-tail?

assignment-expression ::=
    expression assignment-operator statement

pipeline-tail ::=
    '|' new-lines command ('|' new-lines command)*

command ::=
    command-name command-element*
  | command-invocation-operator command-module? command-name-expr command-element*

command-invocation-operator ::=
    '&' | '.'

command-module ::=
    primary-expression

command-name ::=
    generic-token
  | generic-token-with-subexpr

generic-token-with-subexpr ::=
//    No whitespace is allowed between ) and command-name.
    generic-token-with-subexpr-start statement-list? ')' command-name

private command-name-expr ::=
    command-name
  | primary-expression

private command-element ::=
    command-parameter
  | command-argument
  | redirections

command-argument ::=
    command-name-expr

//verbatim-command-argument ::=
//    '--%' verbatim-command-argument-chars

redirections ::=
    redirection+

redirection ::=
    merging-redirection-operator
  | file-redirection-operator redirected-file-name

redirected-file-name ::=
    command-argument
  | primary-expression

/* B.2.3 Expressions */

private expression ::=
    logical-expression

logical-expression ::=
    bitwise-expression (LOGICAL_OPERATOR new-lines bitwise-expression)*

bitwise-expression ::=
    comparison-expression (BITWISE_LOGICAL_OPERATOR new-lines comparison-expression)*

comparison-expression ::=
    additive-expression (comparison-operator new-lines additive-expression)*

additive-expression ::=
    multiplicative-expression (('+'|dash) new-lines multiplicative-expression)*

multiplicative-expression ::=
    format-expression (('\*'|'/'|'%') new-lines format-expression)*

format-expression ::=
    range-expression (format-operator new-lines range-expression)*

range-expression ::=
    array-literal-expression ('..' new-lines array-literal-expression)*

array-literal-expression ::=
    unary-expression (',' new-lines unary-expression)*

unary-expression ::=
    primary-expression
  | expression-with-unary-operator

expression-with-unary-operator ::=
    ',' new-lines unary-expression
  | LOGICAL_NOT_OPERATOR new-lines unary-expression
  | '!' new-lines unary-expression
  | BITWISE_LOGICAL_NOT_OPERATOR new-lines unary-expression
  | '+' new-lines unary-expression
  | dash new-lines unary-expression
  | pre-increment-expression
  | pre-decrement-expression
  | cast-expression
  | SPLIT_OPERATOR new-lines unary-expression
  | JOIN_OPERATOR new-lines unary-expression

pre-increment-expression ::=
    '++' new-lines unary-expression

pre-decrement-expression ::=
    dashdash new-lines unary-expression

cast-expression ::=
    type-literal unary-expression

private attributed-expression ::=
    type-literal variable

private primary-expression ::=
    value
//  | member-access
//  | element-access
//  | invocation-expression
//  | post-increment-expression
//  | post-decrement-expression

private value ::=
    parenthesized-expression
  | sub-expression
  | array-expression
  | script-block-expression
  | hash-literal-expression
  | literal
  | type-literal
  | variable

private parenthesized-expression ::=
    '(' new-lines pipeline new-lines ')'

sub-expression ::=
    '$(' new-lines statement-list? new-lines ')'

array-expression ::=
    '@(' new-lines statement-list? new-lines ')'

script-block-expression ::=
    '{' new-lines script-block new-lines '}'

hash-literal-expression ::=
    '@{' new-lines hash-literal-body? new-lines '}'

hash-literal-body ::=
    hash-entry (statement-terminators hash-entry)*

hash-entry ::=
    key-expression '=' new-lines statement

key-expression ::=
    simple-name
  | unary-expression

post-increment-expression ::=
    primary-expression '++'

post-decrement-expression ::=
    primary-expression dashdash

member-access ::=
// Note no whitespace is allowed after
//    primary-expression.
    primary-expression '.' member-name
    primary-expression  '::' member-name

element-access ::=
    //Note no whitespace is allowed between primary-expression and [.
    primary-expression '[' new-lines expression new-lines ']'

invocation-expression ::=
//        Note no whitespace is allowed after
//    primary-expression.
//   |
   primary-expression '.' member-name argument-list
   | primary-expression  '::' member-name argument-list

argument-list ::=
    '(' argument-expression-list? new-lines ')'

argument-expression-list ::=
    argument-expression (new-lines ',' argument-expression)*

argument-expression ::=
    new-lines logical-argument-expression

logical-argument-expression ::=
   bitwise-argument-expression (LOGICAL_OPERATOR new-lines bitwise-argument-expression)*

bitwise-argument-expression ::=
    comparison-argument-expression (BITWISE_LOGICAL_OPERATOR new-lines comparison-argument-expression)*

comparison-argument-expression ::=
    additive-argument-expression (comparison-operator new-lines additive-argument-expression)*

additive-argument-expression ::=
    multiplicative-argument-expression (('+'|dash) new-lines multiplicative-argument-expression)*

multiplicative-argument-expression ::=
    format-argument-expression (('/*'|'/'|'%') new-lines format-argument-expression)*

format-argument-expression ::=
    range-argument-expression (format-operator new-lines range-argument-expression)*

range-argument-expression ::=
    unary-expression
  | range-expression '..' new-lines unary-expression

member-name ::=
    simple-name
  | string-literal
//  | string-literal-with-subexpression
  | expression-with-unary-operator
  | value

//string-literal-with-subexpression ::=
//    expandable-string-literal-with-subexpr
//    expandable-here-string-literal-with-subexpr
//
//expandable-string-literal-with-subexpr ::=
//    expandable-string-with-subexpr-start statement-list? )
//        expandable-string-with-subexpr-characters expandable-string-with-subexpr-end
//    expandable-here-string-with-subexpr-start statement-list? )
//        expandable-here-string-with-subexpr-characters
//        expandable-here-string-with-subexpr-end
//
//expandable-string-with-subexpr-characters ::=
//    expandable-string-with-subexpr-part
//    expandable-string-with-subexpr-characters expandable-string-with-subexpr-part
//
//expandable-string-with-subexpr-part ::=
//    sub-expression
//    expandable-string-part
//
//expandable-here-string-with-subexpr-characters ::=
//    expandable-here-string-with-subexpr-part
//    expandable-here-string-with-subexpr-characters expandable-here-string-with-subexpr-part
//
//expandable-here-string-with-subexpr-part ::=
//    sub-expression
//    expandable-here-string-part

type-literal ::=
    '[' type-spec ']'

private type-spec ::=
    array-type-name new-lines dimension* ']'
  | generic-type-name new-lines generic-type-arguments ']'
  | type-name

private dimension ::=
    ','

private generic-type-arguments ::=
    type-spec new-lines (',' new-lines type-spec)*

/* B.2.4 Attributes */

attribute-list ::=
    attribute+

attribute ::=
    '[' new-lines attribute-name '(' attribute-arguments new-lines ')' new-lines ']'
  | type-literal

attribute-name ::=
    type-spec

attribute-arguments ::=
    attribute-argument*

attribute-argument ::=
    new-lines expression
  | new-lines simple-name
  | new-lines simple-name '=' new-lines expression